
装饰器
    方法装饰器
        > 方法装饰器声明在一个方法的声明之前，它会被应用到方法的属性描述符上，可以用来监视，修改或者替换方法定义方法装饰器不能用在声明文件( .d.ts)，重载或者任何外部上下文（比如declare的类）中。
        方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：
            对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。
            成员的名字。
            成员的属性描述符。
            class Greeter {
                greeting: string;
                constructor(message: string) {
                    this.greeting = message;
                }

                @enumerable(false)
                greet() {
                    return "Hello, " + this.greeting;
                }
            }

            function enumerable(value: boolean) {
                return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
                    descriptor.enumerable = value;
                };
            }
    
    类装饰器
        > 类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。 类装饰器不能用在声明文件中( .d.ts)，也不能用在任何外部上下文中（比如declare的类）。
            类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。
            如果类装饰器返回一个值，它会使用提供的构造函数来替换类的声明。
            注意 如果你要返回一个新的构造函数，你必须注意处理好原来的原型链。 在运行时的装饰器调用逻辑中 不会为你做这些。
            @sealed
            class Greeter {
                greeting: string;
                constructor(message: string) {
                    this.greeting = message;
                }
                greet() {
                    return "Hello, " + this.greeting;
                }
            }
        参数装饰器
            > 参数装饰器声明在一个参数声明之前（紧靠着参数声明）。 参数装饰器应用于类构造函数或方法声明。
            class Greeter {
                greeting: string;

                constructor(message: string) {
                    this.greeting = message;
                }

                @validate
                greet(@required name: string) {
                    return "Hello " + name + ", " + this.greeting;
                }
            }
        属性装饰器
            >  