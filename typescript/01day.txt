指令 
    nginit          定义应用的初始化值
    ngApp           定义应用程序的根元素
    nginclude       在应用中包含HTML文件
    ngClass         指定HTML元素使用的css
    ngBind          绑定HTML元素到应用程序数据
    ngClick         定义元素被点击时的行为
    ngList	        将文本转换为列表 (数组)
    ngModel         绑定 HTML 控制器的值到应用数据
    ngCloak	        在应用正要加载时防止其闪烁
指令(Directive) — 一个可扩展已有DOM元素或者代表可重复使用的DOM组件，用扩展属性(或者元素)标记。
   自定义指令
    .directive('myApp', function() {
        return {
            template： '姓名： 地址'
        }
    })

    选项restrict可以设置成以下方式：

        'A' - 仅匹配属性名
        'E' - 仅匹配元素名
        'AE' - 既匹配属性名又匹配元素名
        下面把例子的restrict选项选项成restrict: 'E'。

表达式(Expressions) — 用双括号 {{ }} 给元素绑定表达式。
过滤器(Filter) — 格式化数据显示在界面上。
表单控件(Form Control) — 验证用户输入。
控制器(controller) -
    对scope对象进行初始化
    向scope对象中添加方法

控制器与作用域的关系
    控制器 -> 作用域 -> 视图(dom)
    指令  -> 作用域  ->  试图(dom)
//控制器类定义
var myControllerClass = function($scope){
//模型属性定义
$scope.text = "...";
//模型方法定义
$scope.do = function(){...};
};
//在模块中注册控制器
angular.module('someModule',[])
.controller("myController",myControllerClass);

服务负责从远端服务器抓取和存储数据。
基于服务构建的控制器将为angular的作用域层次提供数据和功能。
基于服务和控制器构建的指令将直接与文档对象模型（DOM）元素进行交互。

function GreetingCtrl($scope) {
    $scope.greeting = 'Hola!'
}

指令 自定义指令 控制器 scope 过滤器


...................////.........................

组件  服务  管道  路由  http


组件
@Component最常用的几个选项时:

selector：这个 CSS 选择器用于在模板中标记出该指令，并触发该指令的实例化。
template：组件的内联模板，为组件展示的内容，一般内容比较少时使用。如果提供了它，就不要再用 templateUrl 提供模板了
templateUrl：组件模板文件的 URL。如果提供了它，就不要再用 template 来提供内联模板了。
providers	：使用一个 令牌 配置该指令或组件的 注入器，该令牌会映射到一个依赖项的提供商
exportAs	：一个或多个名字，可以用来在模板中把该指令赋值给一个变量。当有多个名字时，请使用逗号分隔它们
